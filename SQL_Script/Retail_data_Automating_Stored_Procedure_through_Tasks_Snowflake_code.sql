
/* AUTOMATING KPI TABLES CREATION USING STORED PROCEDURES AND TASKS */

-- HOUSEHOLD_KPI
CREATE OR REPLACE PROCEDURE CREATE_OR_REPLACE_HOUSEHOLD_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE HOUSEHOLD_KPI AS

SELECT T.HOUSEHOLD_KEY, D.AGE_DESC, D.MARITAL_STATUS_CODE, D.INCOME_DESC, D.HOMEOWNER_DESC, 
D.HOUSEHOLD_SIZE_DESC, D.HH_COMP_DESC, D.KID_CATEGORY_DESC, 
COUNT(DISTINCT T.BASKET_ID) AS TOT_BASKET_OR_TXN_COUNT,
AVG(T.QUANTITY) AS AVG_BASKET_SIZE,
SUM(T.QUANTITY) AS TOT_BASKET_SIZE,
MAX(T.DATE) - MIN(T.DATE) AS CUSTOMER_TENURE,
AVG(T.SALES_VALUE) AS AVG_SALES_AMOUNT,
SUM(T.SALES_VALUE) AS TOT_SALES_AMOUNT,
AVG(ABS(T.RETAIL_DISC)) AS AVG_RETAIL_DISC, 
AVG(ABS(T.COUPON_DISC)) AS AVG_COUPON_DISC, 
AVG(ABS(T.COUPON_MATCH_DISC)) AS AVG_COUPON_MATCH_DISC,
SUM(ABS(T.RETAIL_DISC)) AS TOT_RETAIL_DISC,
SUM(ABS(T.COUPON_DISC)) AS TOT_COUPON_DISC,
SUM(ABS(T.COUPON_MATCH_DISC)) AS TOT_COUPON_MATCH_DISC,
AVG(ABS(T.RETAIL_DISC) + ABS(T.COUPON_DISC) + ABS(T.COUPON_MATCH_DISC)) AS OVERALL_AVG_DISCOUNT,
SUM(ABS(T.RETAIL_DISC) + ABS(T.COUPON_DISC) + ABS(T.COUPON_MATCH_DISC)) AS TOT_DISCOUNT,
ROUND(SUM(ABS(T.RETAIL_DISC) + ABS(T.COUPON_DISC) + ABS(T.COUPON_MATCH_DISC)) / NULLIF(SUM(T.SALES_VALUE), 0) * 100, 2) AS TOT_DISCOUNT_PERC,
AVG(T.SALES_VALUE + T.RETAIL_DISC + T.COUPON_DISC + T.COUPON_MATCH_DISC) AS AVG_NET_SALES_AMOUNT,
SUM(T.SALES_VALUE + T.RETAIL_DISC + T.COUPON_DISC + T.COUPON_MATCH_DISC) AS TOT_NET_SALES_AMOUNT
FROM TRANSACTION_NEW AS T
LEFT OUTER JOIN DEMOGRAPHIC_RAW AS D ON T.HOUSEHOLD_KEY = D.HOUSEHOLD_KEY
GROUP BY 1,2,3,4,5,6,7,8
ORDER BY 1;
$$;

-- CAMPAIGN_KPI
CREATE OR REPLACE PROCEDURE CREATE_OR_REPLACE_CAMPAIGN_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE CAMPAIGN_KPI AS 

WITH CAMPAIGN_PARTICIPATION AS (
    SELECT HOUSEHOLD_KEY, CAMPAIGN, COUNT(CAMPAIGN) OVER (PARTITION BY HOUSEHOLD_KEY) AS CAMPAIGN_COUNT
    FROM CAMPAIGN_RAW
)
SELECT C.CAMPAIGN, C.DESCRIPTION, CD.START_DATE AS CAMPAIGN_START_DATE, 
CD.END_DATE AS CAMPAIGN_END_DATE, CD.CAMPAIGN_DURATION,
COUNT(DISTINCT C.HOUSEHOLD_KEY) AS TOT_HOUSEHOLDS,
ROUND((COUNT(DISTINCT C.HOUSEHOLD_KEY)) / (SELECT COUNT(DISTINCT HOUSEHOLD_KEY) FROM CAMPAIGN_RAW) * 100, 2) AS HOUSEHOLD_ENGAGEMENT_RATE,
SUM(CASE WHEN CP.CAMPAIGN_COUNT = 1 THEN 1 ELSE 0 END) AS SINGLE_CAMPAIGN_HOUSEHOLDS_COUNT,
SUM(CASE WHEN CP.CAMPAIGN_COUNT > 1 THEN 1 ELSE 0 END) AS MULTIPLE_CAMPAIGN_HOUSEHOLDS_COUNT,
ROUND(SUM(CASE WHEN CP.CAMPAIGN_COUNT = 1 THEN 1 ELSE 0 END) / COUNT(DISTINCT C.HOUSEHOLD_KEY) * 100,2) AS SINGLE_CAMPAIGN_ENGAGEMENT_RATE,
ROUND(SUM(CASE WHEN CP.CAMPAIGN_COUNT > 1 THEN 1 ELSE 0 END) / COUNT(DISTINCT C.HOUSEHOLD_KEY) * 100,2) AS MULTIPLE_CAMPAIGN_ENGAGEMENT_RATE

FROM CAMPAIGN_RAW AS C
LEFT OUTER JOIN CAMPAIGN_DESC_NEW AS CD ON C.CAMPAIGN = CD.CAMPAIGN
LEFT OUTER JOIN CAMPAIGN_PARTICIPATION AS CP ON C.HOUSEHOLD_KEY = CP.HOUSEHOLD_KEY AND C.CAMPAIGN = CP.CAMPAIGN
GROUP BY 1,2,3,4,5
ORDER BY 1;
$$;

-- COUPON_KPI
CREATE OR REPLACE PROCEDURE CREATE_OR_REPLACE_COUPON_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE COUPON_KPI AS

SELECT CO.CAMPAIGN, -- COR.DATE AS COUPON_REDEMPTION_DATE,
COUNT(DISTINCT CO.PRODUCT_ID) AS DISTINCT_PRODUCT_COUNT,
COUNT(DISTINCT CO.COUPON_UPC) AS TOT_COUPONS_DISTRIBUTED,
COUNT(DISTINCT COR.COUPON_UPC) AS TOT_COUPONS_REDEEMED,
ROUND(COUNT(DISTINCT COR.COUPON_UPC) / COUNT(DISTINCT CO.COUPON_UPC) * 100, 2) AS COUPON_REDEMPTION_RATE,
COUNT(DISTINCT COR.HOUSEHOLD_KEY) AS UNIQUE_REDEEMERS_HOUSEHOLDS_COUNT
FROM COUPON_RAW AS CO
LEFT OUTER JOIN COUPON_REDEMPT_NEW AS COR ON CO.COUPON_UPC = COR.COUPON_UPC AND CO.CAMPAIGN = COR.CAMPAIGN
GROUP BY 1
ORDER BY 1;
$$;

-- PRODUCT KPI
CREATE OR REPLACE PROCEDURE CREATE_OR_REPLACE_PRODUCT_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE PRODUCT_KPI AS 

SELECT P.PRODUCT_ID, P.COMMODITY_DESC, P.SUB_COMMODITY_DESC, P.DEPARTMENT, P.BRAND,
COUNT(T.BASKET_ID) TOT_BASKETS,
COUNT(DISTINCT T.HOUSEHOLD_KEY) AS TOTAL_UNIQUE_BUYERS,
COUNT(DISTINCT T.STORE_ID) AS TOT_STORES,
SUM(T.QUANTITY) AS TOT_SOLD_QUANTITY,
SUM(T.SALES_VALUE) AS TOT_SALES_AMOUNT,
SUM(ABS(T.RETAIL_DISC)) AS TOT_RETAIL_DISC,
SUM(ABS(T.COUPON_DISC)) AS TOT_COUPON_DISC,
SUM(ABS(T.COUPON_MATCH_DISC)) AS TOT_COUPON_MATCH_DISC,
SUM(ABS(T.RETAIL_DISC) + ABS(T.COUPON_DISC) + ABS(T.COUPON_MATCH_DISC)) AS TOT_DISCOUNT,
ROUND(SUM(ABS(T.RETAIL_DISC) + ABS(T.COUPON_DISC) + ABS(T.COUPON_MATCH_DISC)) / NULLIF(SUM(T.SALES_VALUE), 0) * 100, 2) AS TOT_DISCOUNT_PERC,
SUM(T.SALES_VALUE + T.RETAIL_DISC + T.COUPON_DISC + T.COUPON_MATCH_DISC) AS TOT_NET_SALES_VALUE
FROM TRANSACTION_NEW AS T
LEFT OUTER JOIN PRODUCT_RAW AS P ON T.PRODUCT_ID = P.PRODUCT_ID
GROUP BY 1,2,3,4,5
ORDER BY 1,2,3,4,5;
$$;

-- TRANSACTION KPI
CREATE OR REPLACE PROCEDURE CREATE_OR_REPLACE_TRANSACTION_KPI()
RETURNS STRING
LANGUAGE SQL
AS
$$
CREATE OR REPLACE TABLE TRANSACTION_KPI AS

SELECT DATE,
COUNT(DISTINCT BASKET_ID) AS UNIQUE_TRANS_COUNT,
ROUND(SUM(QUANTITY)/COUNT(DISTINCT BASKET_ID), 2) AS AVG_PRODUCTS_SOLD_PER_TRANS,
ROUND(SUM(SALES_VALUE)/COUNT(DISTINCT BASKET_ID), 2) AS AVG_SALES_VALUE_PER_TRANS,
COUNT(DISTINCT HOUSEHOLD_KEY) AS UNIQUE_HOUSEHOLD_COUNT,
ROUND(SUM(QUANTITY)/COUNT(DISTINCT HOUSEHOLD_KEY), 2) AS AVG_PRODUCTS_SOLD_PER_HOUSEHOLD,
ROUND(SUM(SALES_VALUE)/COUNT(DISTINCT HOUSEHOLD_KEY), 2) AS AVG_SALES_VALUE_PER_HOUSEHOLD,
COUNT(DISTINCT STORE_ID) AS UNIQUE_STORE_COUNT,
ROUND(SUM(QUANTITY)/COUNT(DISTINCT STORE_ID), 2) AS AVG_PRODUCTS_SOLD_PER_STORE,
ROUND(SUM(SALES_VALUE)/COUNT(DISTINCT STORE_ID), 2) AS AVG_SALES_VALUE_PER_STORE,
ROUND(SUM(QUANTITY) / COUNT(DISTINCT HOUR(TRANS_TIME_FMTD)), 2) AS AVG_PRODUCTS_SOLD_PER_HOUR,
ROUND(SUM(SALES_VALUE) / COUNT(DISTINCT HOUR(TRANS_TIME_FMTD)), 2) AS AVG_SALES_VALUE_PER_HOUR,
COUNT(DISTINCT PRODUCT_ID) AS TOT_UNIQUE_PRODUCTS_SOLD,
SUM(QUANTITY) AS TOT_SOLD_QUANTITY,
SUM(SALES_VALUE) AS TOT_SALES_AMOUNT,
SUM(ABS(RETAIL_DISC)) AS TOT_RETAIL_DISC,
SUM(ABS(COUPON_DISC)) AS TOT_COUPON_DISC,
SUM(ABS(COUPON_MATCH_DISC)) AS TOT_COUPON_MATCH_DISC,
SUM(ABS(RETAIL_DISC) + ABS(COUPON_DISC) + ABS(COUPON_MATCH_DISC)) AS TOT_DISCOUNT,
ROUND(SUM(ABS(RETAIL_DISC) + ABS(COUPON_DISC) + ABS(COUPON_MATCH_DISC)) / SUM(SALES_VALUE) * 100, 2) AS TOT_DISCOUNT_PERC,
SUM(SALES_VALUE + RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS TOT_NET_SALES_VALUE
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 1;
$$;

SHOW PROCEDURES; 

-- We can execute the above procedures manually by running the following code. Whenever we invoke these procedures, the code within them will automatically be executed.

CALL CREATE_OR_REPLACE_HOUSEHOLD_KPI();
CALL CREATE_OR_REPLACE_CAMPAIGN_KPI();
CALL CREATE_OR_REPLACE_COUPON_KPI();
CALL CREATE_OR_REPLACE_PRODUCT_KPI();
CALL CREATE_OR_REPLACE_TRANSACTION_KPI();

-- Instead, to automate the process, we assign these CALL operations to five distinct tasks for each procedure, scheduling them at different times to prevent overlap during code execution.

CREATE OR REPLACE TASK HOUSEHOLD_KPI
WAREHOUSE = COMPUTE_WH
SCHEDULE =  'USING CRON 20 10 23 4 * UTC'  -- At 10:20 AM (IST 3:50 PM), on day 23 of the month, only in April UTC
AS CALL CREATE_OR_REPLACE_HOUSEHOLD_KPI();
  
CREATE OR REPLACE TASK CAMPAIGN_KPI
WAREHOUSE = COMPUTE_WH
SCHEDULE =  'USING CRON 21 10 23 4 * UTC'  
AS CALL CREATE_OR_REPLACE_CAMPAIGN_KPI();

CREATE OR REPLACE TASK COUPON_KPI
WAREHOUSE = COMPUTE_WH
SCHEDULE =  'USING CRON 22 10 23 4 * UTC'  
AS CALL CREATE_OR_REPLACE_COUPON_KPI();

CREATE OR REPLACE TASK PRODUCT_KPI
WAREHOUSE = COMPUTE_WH
SCHEDULE =  'USING CRON 23 10 23 4 * UTC'  
AS CALL CREATE_OR_REPLACE_PRODUCT_KPI();

CREATE OR REPLACE TASK TRANSACTION_KPI
WAREHOUSE = COMPUTE_WH
SCHEDULE =  'USING CRON 24 10 23 4 * UTC'  
AS CALL CREATE_OR_REPLACE_TRANSACTION_KPI();

SHOW TASKS;

ALTER TASK HOUSEHOLD_KPI RESUME;
ALTER TASK CAMPAIGN_KPI RESUME;
ALTER TASK COUPON_KPI RESUME;
ALTER TASK PRODUCT_KPI RESUME;
ALTER TASK TRANSACTION_KPI RESUME;

SELECT * FROM HOUSEHOLD_KPI;  -- 2500 rows
SELECT * FROM CAMPAIGN_KPI;  -- 30 rows
SELECT * FROM COUPON_KPI;  -- 30 rows
SELECT * FROM PRODUCT_KPI;  -- 92,339 rows
SELECT * FROM TRANSACTION_KPI;  -- 711 rows
-- 176 rows before updating new data  
-- 353 rows after updating new data

ALTER TASK HOUSEHOLD_KPI SUSPEND;
ALTER TASK CAMPAIGN_KPI SUSPEND; 
ALTER TASK COUPON_KPI SUSPEND;
ALTER TASK PRODUCT_KPI SUSPEND; 
ALTER TASK TRANSACTION_KPI SUSPEND;

