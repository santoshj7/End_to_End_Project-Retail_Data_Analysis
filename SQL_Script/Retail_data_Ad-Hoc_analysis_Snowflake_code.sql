
/* AD-HOC KPI ANALYSIS */

-- I. CUSTOMER DEMOGRAPHICS KPIS:

SELECT * FROM DEMOGRAPHIC_RAW;

-- 1. Count of unique Households: Measure the total number of unique households in the Demographic table.

SELECT COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS
FROM DEMOGRAPHIC_RAW;  -- 2500

-- 2. Household Composition Distribution: Analyze the distribution of household compositions (HH_COMP_DESC) to understand the composition of households.

SELECT HH_COMP_DESC, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

-- 3. Age Distribution: Calculate the percentage or count of customers in different age groups (AGE_DESC).

SELECT *, ROUND((TOTAL_HOUSEHOLDS / 2500) * 100, 2) AS AGEWISE_HOUSEHOLDS_DISTR_PERC
FROM
(SELECT AGE_DESC, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC);

-- 4. Marital Status Distribution: Analyze the proportion of customers in different marital status categories (MARITAL_STATUS_CODE). 

SELECT MARITAL_STATUS_CODE, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY) / 2500 * 100, 2) AS MARITAL_HOUSEHOLDS_DISTR_PERC
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

-- 5. Income Distribution: Determine the distribution of customers across income levels (INCOME_DESC). 

SELECT INCOME_DESC, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY) / 2500 * 100, 2) AS INCOMEWISE_HOUSEHOLDS_DISTR_PERC
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

-- 6. Homeownership Distribution: Calculate the percentage or count of customers who own or rent their homes (HOMEOWNER_DESC).

SELECT HOMEOWNER_DESC, COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY) / 2500 * 100, 2) AS HOMEOWNER_HOUSEHOLDS_DISTR_PERC
FROM DEMOGRAPHIC_RAW
GROUP BY 1
ORDER BY 2 DESC;

-- 7. Household Composition Distribution:

SELECT HH_COMP_DESC, KID_CATEGORY_DESC, HOUSEHOLD_SIZE_DESC AS TOT_HOUSEHOLD_SIZE_DESC,
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY) / 2500 * 100, 2) AS HOUSEHOLDS_COMP_DISTR_PERC
FROM DEMOGRAPHIC_RAW
GROUP BY 1,2,3
ORDER BY 4 DESC;

-- HOUSEHOLD_KPI

SELECT T.HOUSEHOLD_KEY, D.AGE_DESC, D.MARITAL_STATUS_CODE, D.INCOME_DESC, D.HOMEOWNER_DESC, 
D.HOUSEHOLD_SIZE_DESC, D.HH_COMP_DESC, D.KID_CATEGORY_DESC, 
COUNT(DISTINCT T.BASKET_ID) AS TOT_BASKET_OR_TXN_COUNT,
AVG(T.QUANTITY) AS AVG_BASKET_SIZE,
SUM(T.QUANTITY) AS TOT_BASKET_SIZE,
MAX(T.DATE) - MIN(T.DATE) AS CUSTOMER_TENURE,
AVG(T.SALES_VALUE) AS AVG_SALES_AMOUNT,
SUM(T.SALES_VALUE) AS TOT_SALES_AMOUNT,
AVG(ABS(T.RETAIL_DISC)) AS AVG_RETAIL_DISC, 
AVG(ABS(T.COUPON_DISC)) AS AVG_COUPON_DISC, 
AVG(ABS(T.COUPON_MATCH_DISC)) AS AVG_COUPON_MATCH_DISC,
SUM(ABS(T.RETAIL_DISC)) AS TOT_RETAIL_DISC,
SUM(ABS(T.COUPON_DISC)) AS TOT_COUPON_DISC,
SUM(ABS(T.COUPON_MATCH_DISC)) AS TOT_COUPON_MATCH_DISC,
AVG(ABS(T.RETAIL_DISC) + ABS(T.COUPON_DISC) + ABS(T.COUPON_MATCH_DISC)) AS OVERALL_AVG_DISCOUNT,
SUM(ABS(T.RETAIL_DISC) + ABS(T.COUPON_DISC) + ABS(T.COUPON_MATCH_DISC)) AS TOT_DISCOUNT,
ROUND(SUM(ABS(T.RETAIL_DISC) + ABS(T.COUPON_DISC) + ABS(T.COUPON_MATCH_DISC)) / NULLIF(SUM(T.SALES_VALUE), 0) * 100, 2) AS TOT_DISCOUNT_PERC,
AVG(T.SALES_VALUE + T.RETAIL_DISC + T.COUPON_DISC + T.COUPON_MATCH_DISC) AS AVG_NET_SALES_AMOUNT,
SUM(T.SALES_VALUE + T.RETAIL_DISC + T.COUPON_DISC + T.COUPON_MATCH_DISC) AS TOT_NET_SALES_AMOUNT
FROM TRANSACTION_NEW AS T
LEFT OUTER JOIN DEMOGRAPHIC_RAW AS D ON T.HOUSEHOLD_KEY = D.HOUSEHOLD_KEY
GROUP BY 1,2,3,4,5,6,7,8
ORDER BY 1;

SELECT COUNT(DISTINCT BASKET_ID), COUNT(DISTINCT HOUSEHOLD_KEY),
COUNT( BASKET_ID), COUNT( HOUSEHOLD_KEY)
FROM TRANSACTION_NEW;

SELECT * FROM TRANSACTION_NEW
WHERE HOUSEHOLD_KEY IN (1480, 1846) ;

-- II. CAMPAIGN KPIS:

SELECT * FROM CAMPAIGN_RAW LIMIT 10;
SELECT * FROM CAMPAIGN_DESC_NEW;

-- 1. Number of Campaigns: Count the total number of campaigns in the Campaign table.

SELECT COUNT(DISTINCT CAMPAIGN) AS TOT_CAMPAIGNS
FROM CAMPAIGN_RAW;   -- 30

-- 2. Number of Households Participating in Campaigns: Count the total number of households that participated in the campaigns.

SELECT COUNT(DISTINCT HOUSEHOLD_KEY) AS TOT_HOUSEHOLDS
FROM CAMPAIGN_RAW;   -- 1584

-- 3. Number of Campaigns: Count the total number of campaigns based on their description in the Campaign table.

SELECT DESCRIPTION, COUNT(DISTINCT CAMPAIGN) AS TOT_CAMPAIGNS
FROM CAMPAIGN_RAW 
GROUP BY 1
ORDER BY 1;

-- 4. Campaign Duration: Calculate the duration of each campaign by subtracting the start day from the end day (in the Campaign_desc table).

SELECT CAMPAIGN, DATEDIFF(DAY, START_DATE, END_DATE) AS CAMPAIGN_DURATION
FROM CAMPAIGN_DESC_NEW
ORDER BY 2 DESC;

-- 5. Campaign Effectiveness: Analyse the number of households associated with each campaign (in the Campaign table) to measure campaign reach.

SELECT C.CAMPAIGN, CD.CAMPAIGN_DURATION, COUNT(C.HOUSEHOLD_KEY) AS TOT_HOUSEHOLDS_PARTICIPATED,
ROUND(COUNT(DISTINCT C.HOUSEHOLD_KEY) / (SELECT COUNT(DISTINCT HOUSEHOLD_KEY) FROM CAMPAIGN_RAW) * 100, 2) AS HOUSEHOLDS_PARTICIPATION_PERC
FROM CAMPAIGN_RAW AS C
LEFT OUTER JOIN CAMPAIGN_DESC_NEW AS CD ON C.CAMPAIGN = CD.CAMPAIGN
GROUP BY 1,2
ORDER BY 3 DESC;

-- 6. Households Participation in Campaigns

SELECT HOUSEHOLD_KEY, COUNT(DISTINCT CAMPAIGN) AS TOT_PARTICIPATED_CAMPAIGNS,
ROUND(COUNT(DISTINCT CAMPAIGN) / (SELECT COUNT(DISTINCT CAMPAIGN) FROM CAMPAIGN_RAW) * 100, 2) AS CAMPAIGN_PARTICIPATION_PERC
FROM CAMPAIGN_RAW
GROUP BY 1
ORDER BY 2 DESC;

-- CAMPAIGN_KPI

WITH CAMPAIGN_PARTICIPATION AS (
    SELECT HOUSEHOLD_KEY, CAMPAIGN, COUNT(CAMPAIGN) OVER (PARTITION BY HOUSEHOLD_KEY) AS CAMPAIGN_COUNT
    FROM CAMPAIGN_RAW
)
SELECT C.CAMPAIGN, C.DESCRIPTION, CD.START_DATE AS CAMPAIGN_START_DATE, 
CD.END_DATE AS CAMPAIGN_END_DATE, CD.CAMPAIGN_DURATION,
COUNT(DISTINCT C.HOUSEHOLD_KEY) AS TOT_HOUSEHOLDS,
ROUND((COUNT(DISTINCT C.HOUSEHOLD_KEY)) / (SELECT COUNT(DISTINCT HOUSEHOLD_KEY) FROM CAMPAIGN_RAW) * 100, 2) AS HOUSEHOLD_ENGAGEMENT_RATE,
SUM(CASE WHEN CP.CAMPAIGN_COUNT = 1 THEN 1 ELSE 0 END) AS SINGLE_CAMPAIGN_HOUSEHOLDS_COUNT,
SUM(CASE WHEN CP.CAMPAIGN_COUNT > 1 THEN 1 ELSE 0 END) AS MULTIPLE_CAMPAIGN_HOUSEHOLDS_COUNT,
ROUND(SUM(CASE WHEN CP.CAMPAIGN_COUNT = 1 THEN 1 ELSE 0 END) / COUNT(DISTINCT C.HOUSEHOLD_KEY) * 100,2) AS SINGLE_CAMPAIGN_ENGAGEMENT_RATE,
ROUND(SUM(CASE WHEN CP.CAMPAIGN_COUNT > 1 THEN 1 ELSE 0 END) / COUNT(DISTINCT C.HOUSEHOLD_KEY) * 100,2) AS MULTIPLE_CAMPAIGN_ENGAGEMENT_RATE

FROM CAMPAIGN_RAW AS C
LEFT OUTER JOIN CAMPAIGN_DESC_NEW AS CD ON C.CAMPAIGN = CD.CAMPAIGN
LEFT OUTER JOIN CAMPAIGN_PARTICIPATION AS CP ON C.HOUSEHOLD_KEY = CP.HOUSEHOLD_KEY AND C.CAMPAIGN = CP.CAMPAIGN
GROUP BY 1,2,3,4,5
ORDER BY 1;


-- III. COUPON KPIS:

SELECT * FROM COUPON_RAW LIMIT 20;
SELECT * FROM COUPON_REDEMPT_NEW LIMIT 20;

-- 1. Number of Coupons: Count the total number of coupons distributed in the coupon table.

SELECT COUNT(DISTINCT COUPON_UPC) AS TOT_UNIQUE_COUPONS_ISSUED 
FROM COUPON_RAW;   -- 1135

SELECT COUNT(COUPON_UPC) AS TOT_COUPONS_ISSUED 
FROM COUPON_RAW;   -- 124548

-- 2. Number of Coupons Used: Count the total number of coupons redeemed.

SELECT COUNT(DISTINCT COUPON_UPC) AS TOT_UNIQUE_COUPONS_REDEEMED 
FROM COUPON_REDEMPT_NEW;   -- 556

SELECT COUNT(COUPON_UPC) AS TOT_COUPONS_REDEEMED 
FROM COUPON_REDEMPT_NEW;  -- 2318

-- 3. Coupon Redemption Rate: Calculate the percentage of coupons redeemed (from the coupon_redempt table) compared to the total number of coupons distributed (from the Coupon table).

SELECT COUNT(DISTINCT CO.COUPON_UPC) AS TOT_UNIQUE_COUPONS_ISSUED, 
COUNT(DISTINCT COR.COUPON_UPC) AS TOT_UNIQUE_COUPONS_REDEEMED,
ROUND(COUNT(DISTINCT COR.COUPON_UPC) / COUNT(DISTINCT CO.COUPON_UPC) * 100, 2) AS COUPON_REDEMPTION_RATE
FROM COUPON_RAW AS CO
LEFT OUTER JOIN COUPON_REDEMPT_NEW AS COR ON CO.COUPON_UPC = COR.COUPON_UPC AND CO.CAMPAIGN = COR.CAMPAIGN;

-- 4. Coupon usage by campaign: Measure the number of coupon redemptions (from the coupon_redempt table) for each campaign (in the Coupon table).

SELECT CO.CAMPAIGN, COUNT(DISTINCT CO.COUPON_UPC) AS TOT_COUPONS_DISTRIBUTED,
COUNT(DISTINCT COR.COUPON_UPC) AS TOT_COUPONS_REDEEMED,
ROUND(COUNT(DISTINCT COR.COUPON_UPC) / COUNT(DISTINCT CO.COUPON_UPC) * 100, 2) AS COUPON_REDEMPTION_RATE
FROM COUPON_RAW AS CO
LEFT OUTER JOIN COUPON_REDEMPT_NEW AS COR ON CO.COUPON_UPC = COR.COUPON_UPC AND CO.CAMPAIGN = COR.CAMPAIGN
GROUP BY 1
ORDER BY 3 DESC;

SELECT CO.CAMPAIGN, COUNT(DISTINCT CO.PRODUCT_ID) AS DISTINCT_PRODUCT_COUNT, 
COUNT(DISTINCT CO.COUPON_UPC) AS TOT_UNIQUE_COUPONS_DISTRIBUTED,
COUNT(DISTINCT COR.COUPON_UPC) AS TOT_UNIQUE_COUPONS_REDEEMED,
ROUND(COUNT(DISTINCT COR.COUPON_UPC) / COUNT(DISTINCT CO.COUPON_UPC) * 100, 2) AS REDEMPTION_RATE,
COUNT(CO.COUPON_UPC) AS TOT_COUPONS_DISTRIBUTED,
COUNT(COR.COUPON_UPC) AS TOT_COUPONS_REDEEMED,
FROM COUPON_RAW AS CO
LEFT OUTER JOIN COUPON_REDEMPT_NEW AS COR ON CO.COUPON_UPC = COR.COUPON_UPC AND CO.CAMPAIGN = COR.CAMPAIGN
GROUP BY 1
ORDER BY 1;

-- 5. Count of distinct products associated with each campaign

SELECT COUNT(DISTINCT PRODUCT_ID) AS DISTINCT_PRODUCT_COUNT
FROM COUPON_RAW;   -- 44133

SELECT CAMPAIGN, COUNT(DISTINCT PRODUCT_ID) AS DISTINCT_PRODUCT_COUNT
FROM COUPON_RAW 
GROUP BY 1;

-- 6. Top Redeemed Products by Campaign

SELECT CO.PRODUCT_ID, COR.CAMPAIGN, 
COUNT(DISTINCT COR.COUPON_UPC) AS TOTAL_REDEMPTIONS
FROM COUPON_RAW AS CO 
LEFT OUTER JOIN COUPON_REDEMPT_NEW AS COR ON CO.COUPON_UPC = COR.COUPON_UPC AND CO.CAMPAIGN = COR.CAMPAIGN
GROUP BY 1,2
ORDER BY 3 DESC;

-- 7. Redemption Rate per Product

SELECT CO.PRODUCT_ID, COUNT(DISTINCT CO.COUPON_UPC) AS TOT_COUPONS_DISTRIBUTED,
COUNT(DISTINCT COR.COUPON_UPC) AS TOT_COUPONS_REDEEMED,
ROUND(COUNT(DISTINCT COR.COUPON_UPC) / COUNT(DISTINCT CO.COUPON_UPC) * 100, 2) AS REDEMPTION_RATE_PER_PRODUCT
FROM COUPON_RAW AS CO
LEFT OUTER JOIN COUPON_REDEMPT_NEW AS COR ON CO.COUPON_UPC = COR.COUPON_UPC AND CO.CAMPAIGN = COR.CAMPAIGN
GROUP BY 1
ORDER BY 2 DESC,3 DESC;

-- 8. Top Redeeming Households

SELECT HOUSEHOLD_KEY, COUNT(DISTINCT COUPON_UPC) AS TOT_COUPONS_REDEEMED
FROM COUPON_REDEMPT_NEW
GROUP BY 1
ORDER BY 2 DESC;

SELECT CAMPAIGN, COUNT(COUPON_UPC) AS TOT_COUPONS_REDEEMED,
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS_REDEEMING,
ROUND(COUNT(COUPON_UPC) / COUNT(DISTINCT HOUSEHOLD_KEY), 2) AS AVG_COUPONS_REDEEMED_PER_HOUSEHOLD
FROM COUPON_REDEMPT_NEW
GROUP BY 1
ORDER BY 2 DESC;

-- 9. Day of Week Redemption Analysis

SELECT DAYOFWEEK(DATE) AS DAY_OF_WEEK, DAYNAME(DATE) AS DAY_NAME, 
COUNT(DISTINCT COUPON_UPC) AS TOT_UNIQUE_COUPONS_REDEEMED, 
COUNT(COUPON_UPC) AS TOT_COUPONS_REDEEMED
FROM COUPON_REDEMPT_NEW
GROUP BY 1,2
ORDER BY 3 DESC, 4 DESC;

-- 10. Redemption Peak Periods (e.g., weekly, monthly, yearly)

SELECT DATE_TRUNC('WEEK', DATE) AS WEEK,
COUNT(DISTINCT COUPON_UPC) AS TOT_UNIQUE_COUPONS_REDEEMED, 
COUNT(COUPON_UPC) AS TOT_COUPONS_REDEEMED
FROM COUPON_REDEMPT_NEW
GROUP BY 1
ORDER BY 3 DESC;

SELECT DATE_TRUNC('MONTH', DATE) AS MONTH,
COUNT(DISTINCT COUPON_UPC) AS TOT_UNIQUE_COUPONS_REDEEMED, 
COUNT(COUPON_UPC) AS TOT_COUPONS_REDEEMED
FROM COUPON_REDEMPT_NEW
GROUP BY 1
ORDER BY 3 DESC;

SELECT DATE_TRUNC('YEAR', DATE) AS YEAR,
COUNT(DISTINCT COUPON_UPC) AS TOT_UNIQUE_COUPONS_REDEEMED, 
COUNT(COUPON_UPC) AS TOT_COUPONS_REDEEMED
FROM COUPON_REDEMPT_NEW
GROUP BY 1
ORDER BY 3 DESC;

-- Coupon Redemptions Over Time (Daily Trend) & Campaign

SELECT DATE, CAMPAIGN,
COUNT(DISTINCT COUPON_UPC) AS TOT_UNIQUE_COUPONS_REDEEMED,
COUNT(COUPON_UPC) AS TOT_COUPONS_REDEEMED
FROM COUPON_REDEMPT_NEW
GROUP BY 1,2
ORDER BY 4 DESC;

-- COUPON_KPI

SELECT CO.CAMPAIGN, -- COR.DATE AS COUPON_REDEMPTION_DATE,
COUNT(DISTINCT CO.PRODUCT_ID) AS DISTINCT_PRODUCT_COUNT,
COUNT(DISTINCT CO.COUPON_UPC) AS TOT_COUPONS_DISTRIBUTED,
COUNT(DISTINCT COR.COUPON_UPC) AS TOT_COUPONS_REDEEMED,
ROUND(COUNT(DISTINCT COR.COUPON_UPC) / COUNT(DISTINCT CO.COUPON_UPC) * 100, 2) AS COUPON_REDEMPTION_RATE,
COUNT(DISTINCT COR.HOUSEHOLD_KEY) AS UNIQUE_REDEEMERS_HOUSEHOLDS_COUNT
FROM COUPON_RAW AS CO
LEFT OUTER JOIN COUPON_REDEMPT_NEW AS COR ON CO.COUPON_UPC = COR.COUPON_UPC AND CO.CAMPAIGN = COR.CAMPAIGN
GROUP BY 1
ORDER BY 1;

-- Joining both CAMPAIGN_KPI and COUPON_KPI

SELECT CA.CAMPAIGN, CA.DESCRIPTION, CA.CAMPAIGN_START_DATE, CA.CAMPAIGN_END_DATE, CA.CAMPAIGN_DURATION, CO.DISTINCT_PRODUCT_COUNT, CA.TOT_HOUSEHOLDS, CA.HOUSEHOLD_ENGAGEMENT_RATE, CO.TOT_COUPONS_DISTRIBUTED, 
CO.TOT_COUPONS_REDEEMED, CO.COUPON_REDEMPTION_RATE, CO.UNIQUE_REDEEMERS_HOUSEHOLDS_COUNT, 
CA.SINGLE_CAMPAIGN_HOUSEHOLDS_COUNT, CA.MULTIPLE_CAMPAIGN_HOUSEHOLDS_COUNT, CA.SINGLE_CAMPAIGN_ENGAGEMENT_RATE,
CA.MULTIPLE_CAMPAIGN_ENGAGEMENT_RATE
FROM CAMPAIGN_KPI AS CA 
INNER JOIN COUPON_KPI AS CO ON CA.CAMPAIGN = CO.CAMPAIGN;


-- IV. PRODUCT KPIS:

SELECT * FROM PRODUCT_RAW LIMIT 20;
SELECT * FROM TRANSACTION_NEW;

SELECT COUNT(DISTINCT PRODUCT_ID), COUNT(PRODUCT_ID) FROM PRODUCT_RAW;
SELECT COUNT(DISTINCT MANUFACTURER), COUNT(MANUFACTURER) FROM PRODUCT_RAW;
SELECT COUNT(DISTINCT BASKET_ID), COUNT(BASKET_ID) FROM TRANSACTION_NEW;

-- 1. Total Number of Unique Products:

SELECT COUNT(DISTINCT PRODUCT_ID) AS TOT_PRODUCTS
FROM PRODUCT_RAW;    -- 92353

-- 2. Total Number of Manufacturers:

SELECT COUNT(DISTINCT MANUFACTURER) AS TOTAL_MANUFACTURERS 
FROM PRODUCT_RAW;   -- 6476

-- 3. Total Departments:

SELECT COUNT(DISTINCT DEPARTMENT) AS TOTAL_DEPARTMENTS 
FROM PRODUCT_RAW;   -- 44

-- 4. Number of Commodities:

SELECT COUNT(DISTINCT COMMODITY_DESC) AS TOTAL_COMMODITIES 
FROM PRODUCT_RAW;   -- 308

-- 5. Product distribution:
SELECT BRAND, MANUFACTURER, DEPARTMENT, COMMODITY_DESC, SUB_COMMODITY_DESC, 
COUNT(DISTINCT PRODUCT_ID) AS TOT_PRODUCTS
FROM PRODUCT_RAW
GROUP BY 1,2,3,4,5
ORDER BY 1;

-- 6. Manufacturer distribution: Analyze the distribution of products across different manufacturers (in the Product table).

SELECT MANUFACTURER, COUNT(PRODUCT_ID) AS TOT_PRODUCTS
FROM PRODUCT_RAW
GROUP BY 1
ORDER BY 2 DESC;

SELECT MANUFACTURER, 
COUNT(DISTINCT PRODUCT_ID) AS TOT_PRODUCTS,
COUNT(DISTINCT DEPARTMENT) AS TOT_DEPARTMENTS,
COUNT(DISTINCT COMMODITY_DESC) AS TOT_COMMODITIES,
COUNT(DISTINCT SUB_COMMODITY_DESC) AS TOT_SUB_COMMODITIES
FROM PRODUCT_RAW
GROUP BY 1
ORDER BY 2 DESC;

-- 5. Sales value: Calculate the total sales value for each product (in the Transaction_data table) to identify top-selling products.

SELECT P.PRODUCT_ID, P.COMMODITY_DESC, P.SUB_COMMODITY_DESC, P.DEPARTMENT,
SUM(T.QUANTITY) AS TOT_QUANTITY_SOLD, SUM(T.SALES_VALUE) AS TOT_SALES_AMOUNT
FROM TRANSACTION_NEW AS T
LEFT OUTER JOIN PRODUCT_RAW AS P ON T.PRODUCT_ID = P.PRODUCT_ID
GROUP BY 1,2,3,4
ORDER BY 5 DESC;

-- 7. Department-wise sales: Measure the sales value by department (in the Product table) to understand which departments contribute most to revenue.

SELECT P.DEPARTMENT, COUNT(DISTINCT P.PRODUCT_ID) AS TOT_UNIQUE_PRODUCTS,
SUM(T.QUANTITY) AS TOT_QUANTITY_SOLD, SUM(T.SALES_VALUE) AS TOT_SALES_AMOUNT
FROM TRANSACTION_NEW AS T
LEFT OUTER JOIN PRODUCT_RAW AS P ON T.PRODUCT_ID = P.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC;

-- 8. Brand-wise sales: Calculate the sales value for each brand (in the Product table) to identify top-selling brands.

SELECT P.BRAND, COUNT(DISTINCT P.DEPARTMENT) AS TOT_UNIQUE_DEPARTMENTS,
COUNT(DISTINCT P.PRODUCT_ID) AS TOT_UNIQUE_PRODUCTS,
SUM(T.QUANTITY) AS TOT_QUANTITY_SOLD, SUM(T.SALES_VALUE) AS TOT_SALES_AMOUNT
FROM TRANSACTION_NEW AS T
LEFT OUTER JOIN PRODUCT_RAW AS P ON T.PRODUCT_ID = P.PRODUCT_ID
GROUP BY 1
ORDER BY 3 DESC;

-- 9. Commodity & Sub-Commodity wise sales:

SELECT P.COMMODITY_DESC, P.SUB_COMMODITY_DESC,
COUNT(DISTINCT P.PRODUCT_ID) AS TOT_UNIQUE_PRODUCTS,
SUM(T.QUANTITY) AS TOT_QUANTITY_SOLD, SUM(T.SALES_VALUE) AS TOT_SALES_AMOUNT
FROM TRANSACTION_NEW AS T
LEFT OUTER JOIN PRODUCT_RAW AS P ON T.PRODUCT_ID = P.PRODUCT_ID
GROUP BY 1,2
ORDER BY 4 DESC;

-- PRODUCT KPI

SELECT P.PRODUCT_ID, P.COMMODITY_DESC, P.SUB_COMMODITY_DESC, P.DEPARTMENT, P.BRAND,
COUNT(T.BASKET_ID) TOT_BASKETS,
COUNT(DISTINCT T.HOUSEHOLD_KEY) AS TOTAL_UNIQUE_BUYERS,
COUNT(DISTINCT T.STORE_ID) AS TOT_STORES,
SUM(T.QUANTITY) AS TOT_SOLD_QUANTITY,
SUM(T.SALES_VALUE) AS TOT_SALES_AMOUNT,
SUM(ABS(T.RETAIL_DISC)) AS TOT_RETAIL_DISC,
SUM(ABS(T.COUPON_DISC)) AS TOT_COUPON_DISC,
SUM(ABS(T.COUPON_MATCH_DISC)) AS TOT_COUPON_MATCH_DISC,
SUM(ABS(T.RETAIL_DISC) + ABS(T.COUPON_DISC) + ABS(T.COUPON_MATCH_DISC)) AS TOT_DISCOUNT,
ROUND(SUM(ABS(T.RETAIL_DISC) + ABS(T.COUPON_DISC) + ABS(T.COUPON_MATCH_DISC)) / NULLIF(SUM(T.SALES_VALUE), 0) * 100, 2) AS TOT_DISCOUNT_PERC,
SUM(T.SALES_VALUE + T.RETAIL_DISC + T.COUPON_DISC + T.COUPON_MATCH_DISC) AS TOT_NET_SALES_VALUE
FROM TRANSACTION_NEW AS T
LEFT OUTER JOIN PRODUCT_RAW AS P ON T.PRODUCT_ID = P.PRODUCT_ID
GROUP BY 1,2,3,4,5
ORDER BY 1,2,3,4,5;


-- V. TRANSACTION KPIS:

SELECT * FROM TRANSACTION_NEW LIMIT 10;

SELECT  TRANS_TIME_FMTD, DATE, BASKET_ID FROM TRANSACTION_NEW;
SELECT COUNT(DISTINCT TRANS_TIME_FMTD), COUNT(TRANS_TIME_FMTD),
COUNT(DISTINCT BASKET_ID), COUNT(BASKET_ID) FROM TRANSACTION_NEW;

SELECT DATE,
COUNT(DISTINCT HOUSEHOLD_KEY), COUNT(HOUSEHOLD_KEY),
COUNT(DISTINCT BASKET_ID), COUNT(BASKET_ID),
COUNT(DISTINCT TRANS_TIME_FMTD), COUNT(TRANS_TIME_FMTD),
COUNT(DISTINCT BASKET_ID), COUNT(BASKET_ID),
COUNT(DISTINCT DATE), COUNT(DATE),
COUNT(DISTINCT PRODUCT_ID), COUNT(PRODUCT_ID)
FROM TRANSACTION_NEW
GROUP BY 1;

-- 1. Transaction-Level (Baskets) KPIs: 

SELECT COUNT(DISTINCT BASKET_ID) AS TOT_TRANSACTIONS,
SUM(SALES_VALUE) AS TOT_SALES_VALUE,
ROUND(SUM(QUANTITY) / COUNT(DISTINCT BASKET_ID), 2) AS AVG_QUANTITY_PER_TRANSACTION,
ROUND(SUM(SALES_VALUE) / COUNT(DISTINCT BASKET_ID), 2) AS AVG_SALES_VALUE_PER_TRANSACTION 
FROM TRANSACTION_NEW; 

-- 2. Customer (Household) KPIs: 

SELECT COUNT(DISTINCT HOUSEHOLD_KEY) AS TOT_HOUSEHOLDS_MAKING_TRANS,
ROUND(SUM(QUANTITY) / COUNT(DISTINCT HOUSEHOLD_KEY), 2) AS AVG_PRODUCTS_SOLD_PER_HOUSEHOLD,
ROUND(SUM(SALES_VALUE) / COUNT(DISTINCT HOUSEHOLD_KEY), 2) AS AVG_SALES_VALUE_PER_HOUSEHOLD
FROM TRANSACTION_NEW;   -- 2494

-- 3. Store Performance KPIs:

SELECT COUNT(DISTINCT STORE_ID) AS TOT_UNIQUE_STORES,
ROUND(SUM(QUANTITY) / COUNT(DISTINCT STORE_ID), 2) AS AVG_PRODUCTS_SOLD_PER_STORE,
ROUND(SUM(SALES_VALUE) / COUNT(DISTINCT STORE_ID), 2) AS AVG_SALES_PER_STORE
FROM TRANSACTION_NEW;

-- 4. Product-Level KPIs:

SELECT COUNT(DISTINCT PRODUCT_ID) AS TOT_UNIQUE_PRODUCTS_SOLD,
ROUND(SUM(QUANTITY) / COUNT(DISTINCT PRODUCT_ID), 2) AS AVG_QUANTITY_PER_PRODUCT,
ROUND(SUM(SALES_VALUE) / COUNT(DISTINCT PRODUCT_ID), 2) AS AVG_SALES_VALUE_PER_PRODUCT
FROM TRANSACTION_NEW;

-- 5. Sales Performance by Hour:

SELECT HOUR(TRANS_TIME_FMTD) AS TRANSACTION_HOUR, SUM(SALES_VALUE) AS SALES_BY_HOUR
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;

-- 6. Peak Transaction Hour:

SELECT HOUR(TRANS_TIME_FMTD) AS PEAK_HOUR, COUNT(BASKET_ID) AS TOTAL_TRANSACTIONS
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;

-- 7. Daily Sales Trends:

SELECT DATE, SUM(SALES_VALUE) AS DAILY_SALES
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 1;

-- 8. Average transaction value: Calculate the average sales value per transaction to understand customer spending patterns.

SELECT HOUSEHOLD_KEY, AVG(SALES_VALUE) AS AVG_SALES_VALUE
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;

-- 9. Quantity sold: Measure the total quantity sold (in the Transaction_data table) to understand product demand.

SELECT PRODUCT_ID, SUM(QUANTITY) AS TOT_QUANTITY_SOLD
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;

-- 10. Discounts: Analyze the amount and impact of discounts (RETAIL_DISC, COUPON_DISC, COUPON_MATCH_DISC) on sales value.

SELECT BASKET_ID, SUM(SALES_VALUE) AS TOT_SALES_VALUE, 
SUM(ABS(RETAIL_DISC)) AS TOT_RETAIL_DISC,
SUM(ABS(COUPON_DISC)) AS TOT_COUPON_DISC,
SUM(ABS(COUPON_MATCH_DISC)) AS TOT_COUPON_MATCH_DISC,
SUM(ABS(RETAIL_DISC) + ABS(COUPON_DISC) + ABS(COUPON_MATCH_DISC)) AS TOT_DISCOUNT,
SUM(SALES_VALUE + RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS TOT_NET_SALES_VALUE
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 2 DESC;

-- Overall discount impact and net sales value across all transactions
SELECT SUM(SALES_VALUE) AS TOT_SALES_VALUE, 
SUM(ABS(RETAIL_DISC)) AS TOT_RETAIL_DISC,
SUM(ABS(COUPON_DISC)) AS TOT_COUPON_DISC,
SUM(ABS(COUPON_MATCH_DISC)) AS TOT_COUPON_MATCH_DISC,
SUM(ABS(RETAIL_DISC) + ABS(COUPON_DISC) + ABS(COUPON_MATCH_DISC)) AS TOT_DISCOUNT,
SUM(SALES_VALUE + RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS TOT_NET_SALES_VALUE
FROM TRANSACTION_NEW
ORDER BY 1 DESC;

-- TRANSACTION KPI

SELECT DATE,
COUNT(DISTINCT BASKET_ID) AS UNIQUE_TRANS_COUNT,
ROUND(SUM(QUANTITY)/COUNT(DISTINCT BASKET_ID), 2) AS AVG_PRODUCTS_SOLD_PER_TRANS,
ROUND(SUM(SALES_VALUE)/COUNT(DISTINCT BASKET_ID), 2) AS AVG_SALES_VALUE_PER_TRANS,
COUNT(DISTINCT HOUSEHOLD_KEY) AS UNIQUE_HOUSEHOLD_COUNT,
ROUND(SUM(QUANTITY)/COUNT(DISTINCT HOUSEHOLD_KEY), 2) AS AVG_PRODUCTS_SOLD_PER_HOUSEHOLD,
ROUND(SUM(SALES_VALUE)/COUNT(DISTINCT HOUSEHOLD_KEY), 2) AS AVG_SALES_VALUE_PER_HOUSEHOLD,
COUNT(DISTINCT STORE_ID) AS UNIQUE_STORE_COUNT,
ROUND(SUM(QUANTITY)/COUNT(DISTINCT STORE_ID), 2) AS AVG_PRODUCTS_SOLD_PER_STORE,
ROUND(SUM(SALES_VALUE)/COUNT(DISTINCT STORE_ID), 2) AS AVG_SALES_VALUE_PER_STORE,
ROUND(SUM(QUANTITY) / COUNT(DISTINCT HOUR(TRANS_TIME_FMTD)), 2) AS AVG_PRODUCTS_SOLD_PER_HOUR,
ROUND(SUM(SALES_VALUE) / COUNT(DISTINCT HOUR(TRANS_TIME_FMTD)), 2) AS AVG_SALES_VALUE_PER_HOUR,
COUNT(DISTINCT PRODUCT_ID) AS TOT_UNIQUE_PRODUCTS_SOLD,
SUM(QUANTITY) AS TOT_SOLD_QUANTITY,
SUM(SALES_VALUE) AS TOT_SALES_AMOUNT,
SUM(ABS(RETAIL_DISC)) AS TOT_RETAIL_DISC,
SUM(ABS(COUPON_DISC)) AS TOT_COUPON_DISC,
SUM(ABS(COUPON_MATCH_DISC)) AS TOT_COUPON_MATCH_DISC,
SUM(ABS(RETAIL_DISC) + ABS(COUPON_DISC) + ABS(COUPON_MATCH_DISC)) AS TOT_DISCOUNT,
ROUND(SUM(ABS(RETAIL_DISC) + ABS(COUPON_DISC) + ABS(COUPON_MATCH_DISC)) / SUM(SALES_VALUE) * 100, 2) AS TOT_DISCOUNT_PERC,
SUM(SALES_VALUE + RETAIL_DISC + COUPON_DISC + COUPON_MATCH_DISC) AS TOT_NET_SALES_VALUE
FROM TRANSACTION_NEW
GROUP BY 1
ORDER BY 1;

SELECT DATE, COUNT(TRANS_TIME_FMTD), COUNT(DISTINCT TRANS_TIME_FMTD), SUM(QUANTITY),
ROUND(SUM(QUANTITY) / COUNT(DISTINCT HOUR(TRANS_TIME_FMTD)), 2),
ROUND(SUM(QUANTITY)/COUNT(DISTINCT TRANS_TIME_FMTD), 2) AS AVG_PRODUCTS_SOLD_PER_HOUR,
ROUND(SUM(QUANTITY)/COUNT(TRANS_TIME_FMTD), 2),
ROUND(SUM(SALES_VALUE)/COUNT(DISTINCT TRANS_TIME_FMTD), 2) AS AVG_SALES_VALUE_PER_HOUR
FROM TRANSACTION_NEW
GROUP BY 1;

SELECT DATE, COUNT(DISTINCT DATE), COUNT(DATE), COUNT(DISTINCT HOUR(TRANS_TIME_FMTD)), COUNT(HOUR(TRANS_TIME_FMTD)),
ROUND(SUM(QUANTITY) / COUNT( DATE), 2),
ROUND(SUM(QUANTITY) / COUNT(DISTINCT DATE), 2) AS AVG_PRODUCTS_SOLD_PER_DAY,
ROUND(SUM(QUANTITY) / COUNT(DISTINCT HOUR(TRANS_TIME_FMTD)), 2) AS AVG_PRODUCTS_SOLD_PER_HOUR,
ROUND(SUM(SALES_VALUE) / COUNT(DISTINCT DATE), 2) AS AVG_SALES_VALUE_PER_DAY,
ROUND(SUM(SALES_VALUE) / COUNT(DISTINCT HOUR(TRANS_TIME_FMTD)), 2) AS AVG_SALES_VALUE_PER_HOUR
FROM TRANSACTION_NEW
GROUP BY 1;

